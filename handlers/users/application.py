from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from data.config import ADMIN_ID, bot
from db_api.commands.application import add_application, select_cont_id_application
from states.application import Application

from db_api.tables.application import application_table


async def type_application_invest(message: Message, state: FSMContext):
    type_application = message.text
    application = application_table()
    application.type = type_application
    await state.update_data(application=application)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å ‚úèÔ∏è")
            ],
            [
                KeyboardButton("Ha–∑–∞–¥")
            ]
        ]
    )
    return await message.answer("–û—Ö, –Ω—É –∏ —ç–≥–æ–∏—Å—Ç –∂–µ —Ç—ã... –ß—Ç–æ –∂, –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–π –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω, –∞ –º—ã —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º",reply_markup=keyboard)

async def i_again_changed(message: Message, state: FSMContext):
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton("–í—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª –æ–± —ç—Ç–æ–º ü§ì")
                                       ],
                                       [
                                           KeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª... ü§î")
                                       ]
                                   ]
                                   )
    return await message.answer("–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å –Ω–∞ –Ω–∞—Å —Å–≤–æ—ë –≤—Ä–µ–º—è", reply_markup=keyboard)

async def back(message: Message, state: FSMContext):
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton("–ü—Ä–∏–≤–ª–µ—á—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üçé")
                                       ],
                                       [
                                           KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üçè")
                                       ],
                                       [
                                           KeyboardButton("–ü–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É üåê")
                                       ],
                                       [
                                           KeyboardButton("–Ø —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥—É–º–∞–ª...")
                                       ]
                                   ]
                                   )
    return await message.answer("–°—Ç–æ—è–º–±–∞, –∞ –∫—É–¥–∞ –∑–∞—è–≤–∫—É-—Ç–æ –ø–æ–¥–∞–≤–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard)

async def speak_invest(message: Message):
    await Application.text.set()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("Ha–∑–∞–¥")
            ]
        ]
    )
    return await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: ¬´–ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∏–ª–ª–∏–æ–Ω¬ª\n"
                        "–õ–∞–¥–Ω–æ, —à—É—á—É\n\n\n"


                        "–ó–∞–ø–æ–ª–Ω—è–π –∑–∞—è–≤–∫—É –ø–æ —Ñ–æ—Ä–º–µ:\n"
                        "1. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –≥–µ–Ω–∏–∞–ª—å–Ω–æ–π –∏–¥–µ–∏, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–ª–µ—á—å –Ω–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
                        "2. –û–ø–∏—à–∏ —Å–≤–æ—ë –¥–µ–ª–æ –≤ —Ç—Ä—ë—Ö —Å–ª–æ–≤–∞—Ö\n"
                        "3. –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å\n"
                        "4. –°–∫–æ–ª—å–∫–æ —Å—Ä–µ–¥—Å—Ç–≤ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?", reply_markup=keyboard)

async def text_invest(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text
    application: application_table = data.get("application")
    application.text = text
    await state.update_data(application=application)
    await add_application(user_id=message.from_user.id, type=application.type, text=application.text)
    application_id = await select_cont_id_application()
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support: {message.from_user.id}")
            ]
        ]
    )
    await bot.send_message(chat_id=ADMIN_ID, text=f"#{application_id}\n"
                                                  f"<b>{message.from_user.id}</>\n"
                                                  f"{application.type}\n"
                                                  f"{application.text}\n", reply_markup=inline_keyboard)
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
            ]
        ]
    )
    return await message.answer("–ú–æ–ª–æ–¥–µ—Ü, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=keyboard)

async def begin_back(message: Message, state: FSMContext):
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton("–î–∞ üòé"),
                                           KeyboardButton("–ù–µ—Ç... ü§î")
                                       ]
                                   ]
                                   )
    return await message.answer("–°–ª—É—à–∞–π, –∞ —Ç—ã —Ç–æ–∂–µ –±–µ–∑–¥–µ–ª—å–Ω–∏–∫?", reply_markup=keyboard)

async def type_idea(message: Message, state: FSMContext):
    await Application.text.set()
    type_application = message.text
    application = Application()
    application.type = type_application
    await state.update_data(application=application)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("Ha–∑–∞–¥")
            ]
        ]
    )
    return await message.answer("–¢–∞–∫, –∞ –≤–æ—Ç —ç—Ç–æ –Ω–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è. –ù—É-–∫–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?", reply_markup=keyboard)

async def text_idea(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text
    application: application_table = data.get("application")
    application.text = text
    await state.update_data(application=application)
    await add_application(user_id=message.from_user.id, type=application.type, text=application.text)
    application_id = await select_cont_id_application()
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support: {message.from_user.id}")
            ]
        ]
    )
    await bot.send_message(chat_id=ADMIN_ID, text=f"#{application_id}\n"
                                                  f"<b>{message.from_user.id}</>\n"
                                                  f"{application.type}\n"
                                                  f"{application.text}\n", reply_markup=inline_keyboard)
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
            ]
        ]
    )
    return await message.answer("–ú–æ–ª–æ–¥–µ—Ü, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=keyboard)

async def command(message: Message):
    await Application.type.set()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–î–∞ ü§ì")
            ],
            [
                KeyboardButton("–ù–µ—Ç, —è –∑–∞–Ω—è—Ç–æ–π —á–µ–ª–æ–≤–µ–∫")
            ]
        ]
    )
    return await message.answer("–ì—É–±–∞ –Ω–µ –¥—É—Ä–∞...\n\n"

                                "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –∫ –Ω–∞–º –≤ –∫–æ–º–∞–Ω–¥—É –∏ –±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏?", reply_markup=keyboard)

async def no_people(message: Message, state: FSMContext):
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–ü—Ä–∏–≤–ª–µ—á—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üçé")
            ],
            [
                KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üçè")
            ],
            [
                KeyboardButton("–ü–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É üåê")
            ],
            [
                KeyboardButton("–Ø —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥—É–º–∞–ª...")
            ]
        ]
    )
    return await message.answer("–°—Ç–æ—è–º–±–∞, –∞ –∫—É–¥–∞ –∑–∞—è–≤–∫—É-—Ç–æ –ø–æ–¥–∞–≤–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard)

async def yes_command(message: Message, state: FSMContext):
    type_application = "–ü–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É üåê"
    application = application_table()
    application.type = type_application
    await state.update_data(application=application)
    await Application.text.set()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("Ha–∑–∞–¥")
            ]
        ]
    )
    return await message.answer("–¢–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:\n"
                                "1. –ö—Ç–æ —Ç—ã? –†–∞–±–æ—Ç–∞–µ—à—å, —É—á–∏—à—å—Å—è?\n"
                                "2. –° –∫–µ–º —Ä–∞–±–æ—Ç–∞–ª?\n"
                                "3. –° —á–µ–º —Ä–∞–±–æ—Ç–∞–ª?\n"
                                "4. –ò –≤–æ–æ–±—â–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç—ã? –í—Ä–æ–¥–µ —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç—ã –º–∏–ª–ª–∏–æ–Ω—ã... –ê –º–æ–∂–µ—Ç —è –æ—à–∏–±–∞—é—Å—å...", reply_markup=keyboard)

async def command_text(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text
    application: application_table = data.get("application")
    application.text = text
    await state.update_data(application=application)
    await add_application(user_id=message.from_user.id, type=application.type, text=application.text)
    application_id = await select_cont_id_application()
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support: {message.from_user.id}")
            ]
        ]
    )
    await bot.send_message(chat_id=ADMIN_ID, text=f"#{application_id}\n"
                                                  f"<b>{message.from_user.id}</>\n"
                                                  f"{application.type}\n"
                                                  f"{application.text}\n", reply_markup=inline_keyboard)
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
            ]
        ]
    )
    return await message.answer("–ú–æ–ª–æ–¥–µ—Ü, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=keyboard)

async def back_type(message: Message, state: FSMContext):
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton("–ü—Ä–∏–≤–ª–µ—á—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üçé")
                                       ],
                                       [
                                           KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üçè")
                                       ],
                                       [
                                           KeyboardButton("–ü–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É üåê")
                                       ],
                                       [
                                           KeyboardButton("–Ø —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥—É–º–∞–ª...")
                                       ]
                                   ]
                                   )
    return await message.answer("–°—Ç–æ—è–º–±–∞, –∞ –∫—É–¥–∞ –∑–∞—è–≤–∫—É-—Ç–æ –ø–æ–¥–∞–≤–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard)


def register_application(dp: Dispatcher):
    dp.register_message_handler(
        back,
        Text("Ha–∑–∞–¥"),
        state=["*",Application.text, Application.type, None]
    )
    dp.register_message_handler(
        type_application_invest,
        Text("–ü—Ä–∏–≤–ª–µ—á—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üçé")
    )
    dp.register_message_handler(
        speak_invest,
        Text("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å ‚úèÔ∏è")
    )
    dp.register_message_handler(
        text_invest,
        state=Application.text
    )
    dp.register_message_handler(
        i_again_changed,
        Text("–Ø —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥—É–º–∞–ª...")
    )
    dp.register_message_handler(
        back_type,
        Text("Ha–∑–∞–¥"),
        state=Application.text
    )
    dp.register_message_handler(
        type_idea,
        Text("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üçè"),
    )
    dp.register_message_handler(
        text_idea,
        state=Application.text
    )
    dp.register_message_handler(
        command,
        Text("–ü–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É üåê")
    )
    dp.register_message_handler(
        no_people,
        Text("–ù–µ—Ç, —è –∑–∞–Ω—è—Ç–æ–π —á–µ–ª–æ–≤–µ–∫"),
        state=Application.type
    )
    dp.register_message_handler(
        yes_command,
        Text("–î–∞ ü§ì"),
        state=Application.type
    )
    dp.register_message_handler(
        command_text,
        state=Application.text
    )
    dp.register_message_handler(
        begin_back,
        Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    )
